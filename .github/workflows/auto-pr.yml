name: Auto PR from Prompt

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  make-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Preflight checks
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY_GITHUB }}" ]; then
            echo "Missing OPENAI_API_KEY_GITHUB secret"; exit 1;
          fi
          if [ ! -f ".prompt.txt" ]; then
            echo "Missing .prompt.txt at repo root"; exit 1;
          fi
          echo "Preflight OK"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate edit plan (JSON) with OpenAI
        id: plan
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_GITHUB }}
        run: |
          cat > gen-plan.mjs <<'EOF'
          import { readFile, writeFile } from 'node:fs/promises';

          const apiKey = process.env.OPENAI_API_KEY;
          if (!apiKey) {
            console.error('OPENAI_API_KEY is missing');
            process.exit(1);
          }

          // Load prompt
          const prompt = await readFile('.prompt.txt', 'utf8');

          // Strict JSON edit plan:
          // {
          //   "changes": [
          //     { "path": "README.md", "op": "append", "text": "..." },
          //     { "path": "frontend/index.html", "op": "replace", "content": "<!doctype html>..." }
          //   ],
          //   "title": "PR title",
          //   "body": "PR body"
          // }
          const body = {
            model: "gpt-4o-mini",
            temperature: 0.1,
            max_tokens: 6000,
            response_format: { type: "json_object" },
            messages: [
              { role: "system", content:
                "You are a repository editor. Return ONLY valid JSON with an edit plan in the shape: " +
                "{\"changes\":[{\"path\":\"<rel path>\",\"op\":\"append|replace\",\"text\":\"...\"|\"content\":\"...\"}],\"title\":\"...\",\"body\":\"...\"}. " +
                "No markdown, no prose. All file paths must be relative to repo root. For 'append', include trailing newline if needed." },
              { role: "user", content: prompt }
            ]
          };

          const resp = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });

          if (!resp.ok) {
            const text = await resp.text();
            console.error('OpenAI API error:', resp.status, text);
            process.exit(1);
          }

          const data = await resp.json();
          const plan = data?.choices?.[0]?.message?.content ?? '';

          // Basic validation: must be JSON with "changes"
          let parsed;
          try {
            parsed = JSON.parse(plan);
          } catch (e) {
            console.error('Plan is not valid JSON:', plan.slice(0, 500));
            process.exit(1);
          }
          if (!parsed || !Array.isArray(parsed.changes)) {
            console.error('JSON plan missing "changes" array.');
            process.exit(1);
          }

          await writeFile('edit-plan.json', JSON.stringify(parsed, null, 2), 'utf8');
          console.log('Plan OK. Changes:', parsed.changes.length);
          EOF

          node gen-plan.mjs
          echo '--- PLAN HEAD ---'
          sed -n '1,80p' edit-plan.json || true
          echo '-----------------'

      - name: Apply edit plan
        id: apply
        run: |
          set -e
          BRANCH="auto/fix-$(date +%s)"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          git checkout -b "$BRANCH"

          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          function ensureDirFor(filePath) {
            const dir = path.dirname(filePath);
            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
          }

          const plan = JSON.parse(fs.readFileSync('edit-plan.json', 'utf8'));
          for (const change of plan.changes) {
            const p = change.path;
            const op = change.op;
            if (!p || !op) throw new Error('Invalid change: ' + JSON.stringify(change));

            ensureDirFor(p);

            if (op === 'append') {
              const text = change.text ?? '';
              fs.appendFileSync(p, text, 'utf8');
              console.log('[append]', p, `(+${text.length} chars)`);
            } else if (op === 'replace') {
              const content = change.content ?? '';
              fs.writeFileSync(p, content, 'utf8');
              console.log('[replace]', p, `(${content.length} chars)`);
            } else {
              throw new Error('Unknown op: ' + op);
            }
          }

          // Save PR meta to files for next step
          fs.writeFileSync('.pr-title.txt', plan.title || 'Auto-generated PR from .prompt.txt', 'utf8');
          fs.writeFileSync('.pr-body.txt', plan.body || 'This PR was generated by the Auto PR workflow.', 'utf8');
          NODE

          if git status --porcelain | grep . >/dev/null 2>&1; then
            git add -A
            git commit -m "Auto edit from .prompt.txt"
            git push origin "$BRANCH"
          else
            echo "No changes detected after applying edit plan."
          fi

      - name: Open Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.apply.outputs.branch }}';
            const { owner, repo } = context.repo;

            // Only open PR if branch has at least one commit
            try {
              const { data: commits } = await github.rest.repos.listCommits({
                owner, repo, sha: branch, per_page: 1
              });
              if (!commits.length) {
                core.info('No commit on new branch; skipping PR creation.');
                return;
              }
            } catch {
              core.info('Branch has no commits; skipping PR creation.');
              return;
            }

            const fs = require('fs');
            const title = fs.readFileSync('.pr-title.txt', 'utf8');
            const body = fs.readFileSync('.pr-body.txt', 'utf8');

            const res = await github.rest.pulls.create({
              owner, repo,
              title,
              head: branch,
              base: 'main',
              body
            });
            core.info(`PR #${res.data.number} created`);
