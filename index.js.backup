import 'dotenv/config';
import express from 'express';
import axios from 'axios';
import * as cheerio from 'cheerio';
import Papa from 'papaparse';
import OpenAI from 'openai';

const app = express();
app.use(express.json({ limit: '4mb' }));
app.use(express.static('public'));

const PORT = process.env.PORT || 8080;

const ZYTE_API_KEY = process.env.ZYTE_API_KEY || '';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '';
const SHOPIFY_STORE_DOMAIN = process.env.SHOPIFY_STORE_DOMAIN || '';
const SHOPIFY_ADMIN_TOKEN = process.env.SHOPIFY_ADMIN_TOKEN || '';

const openai = OPENAI_API_KEY ? new OpenAI({ apiKey: OPENAI_API_KEY }) : null;

function ceilToFive(n){ const x=Math.ceil(Number(n)||0); return Math.ceil(x/5)*5; }
function slugify(t){ return (t||'').toString().normalize('NFKD').replace(/[\u0300-\u036f]/g,'').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,255); }
function cleanPriceLike(s){ if(!s) return 0; const m=String(s).replace(/\s+/g,' ').match(/([0-9]{1,3}(?:,[0-9]{3})*(?:\.[0-9]{2})?|[0-9]+(?:\.[0-9]{2})?)/); return m? Number(m[0].replace(/,/g,'')):0; }
function cubicFeetFromInches(L,W,H){ const l=+L||0,w=+W||0,h=+H||0; return l>0&&w>0&&h>0 ? +((l*w*h)/1728).toFixed(3) : 0; }
function totalVolumeFt3(boxes){ if(!Array.isArray(boxes)) return 0; return +boxes.reduce((a,b)=>a+cubicFeetFromInches(b.l,b.w,b.h),0).toFixed(3); }
function textTruncate(str,max=110000){ if(!str) return ''; if(str.length<=max) return str; const head=str.slice(0,Math.floor(max*0.7)); const tail=str.slice(-Math.floor(max*0.3)); return `${head}\n<!-- TRUNCATED -->\n${tail}`; }

async function fetchViaZyte(url){
  if(!ZYTE_API_KEY) throw new Error('Missing ZYTE_API_KEY');
  const r = await axios.post('https://api.zyte.com/v1/extract',
    { url, browserHtml: true, httpResponseBody: true },
    { auth:{ username: ZYTE_API_KEY, password: '' }, timeout: 45000 }
  );
  const body = r?.data?.httpResponseBody || r?.data?.browserHtml || '';
  if(typeof body==='string') return body;
  if(body?.type==='Buffer' && Array.isArray(body.data)) return Buffer.from(body.data).toString('utf8');
  return String(body||'');
}
async function fetchDirect(url){
  const r = await axios.get(url,{ timeout:30000, headers:{ 'User-Agent':'Mozilla/5.0 (SDL Importer; +https://sdl.bm)' }});
  return r.data;
}
async function fetchHtml(url){ try{ return await fetchViaZyte(url);} catch{ return await fetchDirect(url);} }

async function parseWithOpenAI({ url, html }){
  if(!openai) return null;
  const system = `You are a product page parser. Extract JSON with keys: title (string), price (number), images (array of urls), vendor (string), body_html (short HTML), source_url (string). Prefer OpenGraph/JSON-LD if present. Never invent data.`;
  const out = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    temperature: 0.2,
    response_format: { type: 'json_object' },
    messages: [
      { role:'system', content: system },
      { role:'user', content: `URL:\n${url}\n\nHTML:\n${textTruncate(html)}` }
    ]
  });
  try{
    const j = JSON.parse(out.choices[0].message.content||'{}');
    return {
      title: j.title || '',
      price: Number(j.price || 0),
      images: Array.isArray(j.images)? j.images.filter(Boolean): [],
      image: (Array.isArray(j.images)&&j.images[0]) || '',
      vendor: j.vendor || '',
      body_html: j.body_html || '',
      source_url: j.source_url || url
    };
  }catch{ return null; }
}

async function parseAmazon(url, html){
  const $ = cheerio.load(html);
  const title = $('#productTitle').text().trim() || $('meta[property="og:title"]').attr('content') || '';
  const priceStr = $('span.a-price span.a-offscreen').first().text().trim() || $('span.a-offscreen').first().text().trim() || '';
  const price = cleanPriceLike(priceStr);
  const image = $('#imgTagWrapperId img#landingImage').attr('data-old-hires') || $('#imgTagWrapperId img#landingImage').attr('src') || $('img[data-a-image-name="landingImage"]').attr('src') || $('meta[property="og:image"]').attr('content') || '';
  const vendor = $('#bylineInfo').text().trim() || 'Amazon';
  const bullets = $('#feature-bullets li').map((_,el)=>`<li>${$(el).text().trim()}</li>`).get().join('');
  const desc = bullets || $('#productDescription').text().trim() || $('meta[name="description"]').attr('content') || '';
  return { title, price, image, images: image?[image]:[], vendor, body_html: bullets? `<ul>${bullets}</ul>`: desc, source_url:url };
}
async function parseLuna(url, html){
  const $ = cheerio.load(html);
  const title = $('meta[property="og:title"]').attr('content') || $('h1').first().text().trim() || $('title').text().trim();
  const image = $('meta[property="og:image"]').attr('content') || $('img').first().attr('src') || '';
  const desc = $('meta[name="description"]').attr('content') || '';
  const priceSel = $('[class*="price"], .product-price, .price__current, .product__price').first().text().trim();
  const price = cleanPriceLike(priceSel);
  const vendor = 'Luna Furniture';
  return { title:(title||'').trim(), price, image, images:image?[image]:[], vendor, body_html:desc, source_url:url };
}
async function parseGeneric(url, html){
  const $ = cheerio.load(html);
  const title = $('meta[property="og:title"]').attr('content') || $('h1').first().text().trim() || $('title').text().trim();
  const image = $('meta[property="og:image"]').attr('content') || $('img').first().attr('src') || '';
  const desc = $('meta[name="description"]').attr('content') || '';
  const body = $('body').text();
  const m = body.match(/\$[\s]*([0-9]{1,3}(?:,[0-9]{3})*(?:\.[0-9]{2})?)/);
  const price = m ? cleanPriceLike(m[0]) : 0;
  const vendor = $('meta[property="og:site_name"]').attr('content') || new URL(url).hostname;
  return { title:(title||'').trim(), price, image, images:image?[image]:[], vendor, body_html:desc, source_url:url };
}
function pickParser(url){
  const host = new URL(url).hostname.replace(/^www\./,'');
  if(host.includes('amazon.')) return parseAmazon;
  if(host.includes('lunafurniture')) return parseLuna;
  return parseGeneric;
}

let cachedCollections = { custom: [], smart: [] };
async function fetchShopifyCollections(){
  if(!SHOPIFY_STORE_DOMAIN || !SHOPIFY_ADMIN_TOKEN) return { custom:[], smart:[] };
  const base = `https://${SHOPIFY_STORE_DOMAIN}/admin/api/2024-07`;
  const headers = { 'X-Shopify-Access-Token': SHOPIFY_ADMIN_TOKEN };
  try{
    const [c,s] = await Promise.all([
      axios.get(`${base}/custom_collections.json?limit=250`, { headers }),
      axios.get(`${base}/smart_collections.json?limit=250`, { headers })
    ]);
    return { custom: c.data.custom_collections||[], smart: s.data.smart_collections||[] };
  }catch{ return { custom:[], smart:[] }; }
}
app.get('/api/collections', async (_req,res)=>{ cachedCollections = await fetchShopifyCollections(); res.json(cachedCollections); });

const CATEGORY_KEYWORDS = [
  { cat: 'Home & garden > Furniture > Sofas', kws: ['sofa','couch','loveseat','sectional'] },
  { cat: 'Home & garden > Furniture > Beds & bed frames', kws: ['bed','platform bed','king','queen','full','twin'] },
  { cat: 'Home & garden > Furniture > Mattresses', kws: ['mattress','memory foam','hybrid mattress'] },
  { cat: 'Home & garden > Furniture > Tables > Coffee tables', kws: ['coffee table'] },
  { cat: 'Home & garden > Furniture > Tables > Dining tables', kws: ['dining table'] },
  { cat: 'Home & garden > Furniture > Chairs > Dining chairs', kws: ['dining chair'] },
  { cat: 'Home & garden > Furniture > Storage & organization > Dressers', kws: ['dresser','chest'] },
  { cat: 'Home & garden > Decor > Rugs', kws: ['rug','runner'] },
  { cat: 'Home & garden > Furniture > TV stands & entertainment centers', kws: ['tv stand','entertainment center','media console'] }
];
function guessProductCategory(title, body, tags=[]){
  const hay = `${title} ${body} ${tags.join(' ')}`.toLowerCase();
  for(const {cat,kws} of CATEGORY_KEYWORDS) if(kws.some(k=>hay.includes(k))) return cat;
  return '';
}
function autoCollections(title, vendor, tags=[]){
  const guess=[]; const hay=`${title} ${vendor} ${tags.join(' ')}`.toLowerCase();
  for(const c of [...(cachedCollections.custom||[]), ...(cachedCollections.smart||[])]) {
    const t=(c.title||'').toLowerCase(); if(t && hay.includes(t)) guess.push(c.title);
  }
  return Array.from(new Set(guess)).slice(0,3);
}

const CSV_HEADERS = [
  'Handle','Title','Body (HTML)','Vendor','Product Category','Type','Tags','Published',
  'Option1 Name','Option1 Value','Variant SKU','Variant Inventory Tracker','Variant Inventory Qty','Variant Inventory Policy','Variant Fulfillment Service',
  'Variant Price','Variant Compare At Price','Variant Requires Shipping','Variant Taxable','Variant Barcode',
  'Image Src','Image Position','Image Alt Text','SEO Title','SEO Description','Variant Image','Variant Weight Unit','Variant Tax Code','Cost per item','Status',
  'Meta: Source URL','Meta: Auto Collections','Meta: Box Count','Meta: Box Total Volume (ft3)','Meta: Boxes JSON',
  'Meta: Box1 L (in)','Meta: Box1 W (in)','Meta: Box1 H (in)','Meta: Box1 ft3',
  'Meta: Box2 L (in)','Meta: Box2 W (in)','Meta: Box2 H (in)','Meta: Box2 ft3',
  'Meta: Box3 L (in)','Meta: Box3 W (in)','Meta: Box3 H (in)','Meta: Box3 ft3',
  'Meta: Box4 L (in)','Meta: Box4 W (in)','Meta: Box4 H (in)','Meta: Box4 ft3',
  'Meta: Box5 L (in)','Meta: Box5 W (in)','Meta: Box5 H (in)','Meta: Box5 ft3',
  'Meta: Box6 L (in)','Meta: Box6 W (in)','Meta: Box6 H (in)','Meta: Box6 ft3'
];

function boxesToColumns(boxes=[]){
  const cols = {};
  const limit = 6;
  const b = Array.isArray(boxes) ? boxes.slice(0,limit) : [];
  b.forEach((bx, i)=>{
    const idx = i+1;
    cols[`Meta: Box${idx} L (in)`] = String(bx.l ?? '');
    cols[`Meta: Box${idx} W (in)`] = String(bx.w ?? '');
    cols[`Meta: Box${idx} H (in)`] = String(bx.h ?? '');
    cols[`Meta: Box${idx} ft3`] = String(cubicFeetFromInches(bx.l, bx.w, bx.h) || '');
  });
  for(let i=b.length+1;i<=limit;i++){
    cols[`Meta: Box${i} L (in)`] = '';
    cols[`Meta: Box${i} W (in)`] = '';
    cols[`Meta: Box${i} H (in)`] = '';
    cols[`Meta: Box${i} ft3`] = '';
  }
  return cols;
}

function buildRow(p){
  const bcount = Array.isArray(p.boxes)? p.boxes.length : 0;
  const btotal = totalVolumeFt3(p.boxes||[]);
  const base = {
    'Handle': p.handle,
    'Title': p.title,
    'Body (HTML)': p.body_html || '',
    'Vendor': p.vendor || '',
    'Product Category': p.product_category || '',
    'Type': p.type || '',
    'Tags': (p.tags||[]).join(', '),
    'Published': 'TRUE',
    'Option1 Name': 'Title',
    'Option1 Value': 'Default Title',
    'Variant SKU': p.sku || '',
    'Variant Inventory Tracker': '',
    'Variant Inventory Qty': '',
    'Variant Inventory Policy': 'deny',
    'Variant Fulfillment Service': 'manual',
    'Variant Price': String(p.price_rounded || ''),
    'Variant Compare At Price': '',
    'Variant Requires Shipping': 'TRUE',
    'Variant Taxable': 'TRUE',
    'Variant Barcode': '',
    'Image Src': p.images?.[0] || p.image || '',
    'Image Position': '1',
    'Image Alt Text': p.title || '',
    'SEO Title': (p.title||'').slice(0,70),
    'SEO Description': (p.seo_description||'').slice(0,320),
    'Variant Image': p.images?.[0] || '',
    'Variant Weight Unit': 'lb',
    'Variant Tax Code': '',
    'Cost per item': String(p.cost || ''),
    'Status': 'active',
    'Meta: Source URL': p.source_url || '',
    'Meta: Auto Collections': (p.auto_collections||[]).join(' | '),
    'Meta: Box Count': String(bcount),
    'Meta: Box Total Volume (ft3)': String(btotal || ''),
    'Meta: Boxes JSON': JSON.stringify(p.boxes||[])
  };
  return { ...base, ...boxesToColumns(p.boxes||[]) };
}

function computeRetail(cost, marginPct=45){ const base=Number(cost||0); const raw=base*(1+Number(marginPct)/100); return ceilToFive(raw); }

async function parseProduct(url, html){
  const parser = pickParser(url);
  let p = await parser(url, html);
  if(!p?.title || (!p?.price && !p?.image)){
    const ai = await parseWithOpenAI({ url, html });
    if(ai){ p = { ...p, ...ai, price: Number(ai.price || p.price || 0), images: ai.images?.length ? ai.images : p.images }; }
  }
  p.price = Number(p.price || 0);
  if(!p.images || !p.images.length) p.images = p.image ? [p.image] : [];
  return p;
}

app.post('/api/preview', async (req,res)=>{
  try{
    const { urls = [], marginPercent = 45, overrides = {} } = req.body || {};
    if(!Array.isArray(urls) || !urls.length) return res.status(400).json({ error: 'Provide { urls: string[] }' });
    
    cachedCollections = await fetchShopifyCollections();
    
    const items = [];
    for(const url of urls){
      try{
        const html = await fetchHtml(url);
        const p = await parseProduct(url, html);
        const handle = slugify(p.title || p.vendor || 'item');

        const o = overrides[handle] || {};
        const margin = Number(o.marginPercent ?? marginPercent);
        const cost = Number(o.cost ?? p.price ?? 0);

        const boxes = Array.isArray(o.boxes) ? o.boxes.map(b=>({ l:Number(b.l)||'', w:Number(b.w)||'', h:Number(b.h)||'' })) : [];

        const price_rounded = computeRetail(cost, margin);
        const tags = Array.from(new Set([p.vendor, new URL(url).hostname].filter(Boolean)));
        const product_category = o.product_category || guessProductCategory(p.title, p.body_html, tags);
        const auto_collections = autoCollections(p.title, p.vendor, tags);

        items.push({
          ...p,
          handle,
          cost,
          price_rounded,
          margin_percent: margin,
          tags,
          product_category,
          auto_collections,
          boxes
        });
      }catch(e){
        items.push({
          title: 'FAILED TO SCRAPE', vendor:'', price:0, image:'', images:[], body_html:'', source_url:url,
          handle: slugify('failed-'+url), cost:0, price_rounded:0, margin_percent:Number(marginPercent),
          tags:[], product_category:'', auto_collections:[], boxes:[]
        });
      }
    }
    
    res.json({ items });
  }catch(err){ res.status(500).json({ error: err.message || 'Server error' }); }
});

app.post('/api/build-csv', async (req,res)=>{
  try{
    const { urls = [], marginPercent = 45, overrides = {} } = req.body || {};
    if(!Array.isArray(urls) || !urls.length) return res.status(400).json({ error: 'Provide { urls: string[] }' });
    
    cachedCollections = await fetchShopifyCollections();
    
    const rows = [];
    for(const url of urls){
      try{
        const html = await fetchHtml(url);
        const p = await parseProduct(url, html);
        const handle = slugify(p.title || p.vendor || 'item');

        const o = overrides[handle] || {};
        const cost = Number(o.cost ?? p.price ?? 0);
        const margin = Number(o.marginPercent ?? marginPercent);
        const boxes = Array.isArray(o.boxes) ? o.boxes.map(b=>({ l:Number(b.l)||'', w:Number(b.w)||'', h:Number(b.h)||'' })) : [];

        const product_category = o.product_category || guessProductCategory(p.title, p.body_html, []);
        const auto_collections = autoCollections(p.title, p.vendor, []);
        const price_rounded = computeRetail(cost, margin);

        const enriched = {
          ...p,
          handle,
          cost,
          product_category,
          auto_collections,
          price_rounded,
          type: o.type || '',
          tags: Array.from(new Set([(p.vendor||''), (new URL(url)).hostname].filter(Boolean))),
          boxes
        };

        rows.push(buildRow(enriched));

        if(Array.isArray(p.images) && p.images.length>1){
          p.images.slice(1).forEach((img, idx)=>{
            rows.push({ 'Handle': enriched.handle, 'Image Src': img, 'Image Position': String(idx+2) });
          });
        }
      }catch{
        const handle = slugify('failed-'+url);
        rows.push({
          'Handle': handle, 'Title':'FAILED TO SCRAPE', 'Body (HTML)':'', 'Vendor':'',
          'Product Category':'', 'Type':'', 'Tags':'', 'Published':'TRUE',
          'Option1 Name':'Title', 'Option1 Value':'Default Title', 'Variant SKU':'',
          'Variant Inventory Tracker':'', 'Variant Inventory Qty':'', 'Variant Inventory Policy':'deny',
          'Variant Fulfillment Service':'manual', 'Variant Price':'', 'Variant Compare At Price':'',
          'Variant Requires Shipping':'TRUE', 'Variant Taxable':'TRUE', 'Variant Barcode':'',
          'Image Src':'', 'Image Position':'1', 'Image Alt Text':'', 'SEO Title':'', 'SEO Description':'',
          'Variant Image':'', 'Variant Weight Unit':'lb', 'Variant Tax Code':'', 'Cost per item':'', 'Status':'active',
          'Meta: Source URL': url, 'Meta: Auto Collections':'', 'Meta: Box Count':'', 'Meta: Box Total Volume (ft3)':'', 'Meta: Boxes JSON':'',
          'Meta: Box1 L (in)':'','Meta: Box1 W (in)':'','Meta: Box1 H (in)':'','Meta: Box1 ft3':'',
          'Meta: Box2 L (in)':'','Meta: Box2 W (in)':'','Meta: Box2 H (in)':'','Meta: Box2 ft3':'',
          'Meta: Box3 L (in)':'','Meta: Box3 W (in)':'','Meta: Box3 H (in)':'','Meta: Box3 ft3':'',
          'Meta: Box4 L (in)':'','Meta: Box4 W (in)':'','Meta: Box4 H (in)':'','Meta: Box4 ft3':'',
          'Meta: Box5 L (in)':'','Meta: Box5 W (in)':'','Meta: Box5 H (in)':'','Meta: Box5 ft3':'',
          'Meta: Box6 L (in)':'','Meta: Box6 W (in)':'','Meta: Box6 H (in)':'','Meta: Box6 ft3':''
        });
      }
    }
    
    const csv = Papa.unparse({
      fields: CSV_HEADERS,
      data: rows.map(r => CSV_HEADERS.map(h => r[h] ?? ''))
    });
    
    res.setHeader('Content-Type','text/csv');
    res.setHeader('Content-Disposition','attachment; filename=sdl_shopify_import.csv');
    res.status(200).send(csv);
  }catch(err){ res.status(500).json({ error: err.message || 'Server error' }); }
});

app.get('/api/health', (_req,res)=>res.json({ ok:true }));

app.listen(PORT, ()=>{ console.log(`SDL Shopify Product Import running on ${PORT}`); });
