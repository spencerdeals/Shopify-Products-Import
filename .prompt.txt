{
  "changes": [
    {
      "path": "backend/fastScraper.js",
      "op": "replace",
      "content": "// backend/fastScraper.js — production-safe server for Instant Import\nconst express = require('express');\nconst cors = require('cors');\nconst path = require('path');\n\n// Optional modules; handle if missing\nlet zyte;\ntry { zyte = require('./zyteScraper'); } catch { zyte = null; }\nlet gpt;\ntry { gpt = require('./gptParser'); } catch { gpt = null; }\n\nconst app = express();\napp.set('trust proxy', 1); // behind proxy (Railway), avoids rate-limit XFF warning\napp.use(express.json({ limit: '1mb' }));\n\n// CORS allowlist: prod + common local dev ports\nconst ALLOWED = new Set([\n  'https://sdl.bm',\n  'https://www.sdl.bm',\n  'http://localhost:3000',\n  'http://localhost:5173',\n  'http://localhost:8080'\n]);\napp.use(cors({\n  origin: (origin, cb) => {\n    if (!origin) return cb(null, true); // allow curl/postman\n    const ok = ALLOWED.has(origin);\n    if (!ok) console.log('CORS blocked origin:', origin);\n    cb(null, ok);\n  },\n  methods: ['GET','POST','OPTIONS'],\n  credentials: true\n}));\n\n// Health endpoints\napp.get('/ping', (_req, res) => res.json({ ok: true, service: 'instant-import' }));\napp.get('/health', (_req, res) => res.json({ ok: true }));\n\n// Serve the form (frontend)\napp.get('/form', (_req, res) => {\n  res.sendFile(path.join(process.cwd(), 'frontend', 'index.html'));\n});\n\n// Price + image helpers\nfunction toNumber(x) {\n  if (typeof x === 'number') return x;\n  if (typeof x !== 'string') return NaN;\n  const cleaned = x.replace(/[\\s,$£€¥A-Za-z]/g, '').replace(/,/g, '');\n  return parseFloat(cleaned);\n}\nfunction tierFor(z) {\n  const name = ((z?.name || z?.title || '') + ' ' + (Array.isArray(z?.breadcrumbs) ? z.breadcrumbs.join(' ') : '')).toLowerCase();\n  const vol = Number(z?.volumeFt3 || z?.volume || 0);\n  if (vol > 20 || /(sectional|chaise|3-seater|4-seater)/.test(name)) return { tier: 'LARGE', min: 200 };\n  if (vol >= 10 || /(sofa|couch|loveseat)/.test(name)) return { tier: 'MEDIUM', min: 100 };\n  return { tier: 'SMALL', min: 50 };\n}\nfunction pickPrice(z) {\n  const candidates = [\n    { k: 'currentPrice', v: z?.currentPrice },\n    { k: 'salePrice',    v: z?.salePrice },\n    { k: 'regularPrice', v: z?.regularPrice },\n    { k: 'listPrice',    v: z?.listPrice },\n    { k: 'price',        v: z?.price }\n  ]\n    .filter(c => c.v != null)\n    .map(c => ({ k: c.k, n: toNumber(c.v) }))\n    .filter(c => isFinite(c.n) && c.n > 0);\n  if (!candidates.length) return null;\n  const order = ['currentPrice','salePrice','regularPrice','listPrice','price'];\n  const byPriority = [...candidates].sort((a,b) => order.indexOf(a.k) - order.indexOf(b.k));\n  const { min } = tierFor(z);\n  let best = byPriority[0];\n  if (best.n < min) {\n    const sane = byPriority.find(c => c.n >= min);\n    if (sane) best = sane; else return null;\n  }\n  return best; // {k,n}\n}\nfunction pickImage(z, selectedVariant) {\n  const images = Array.isArray(z?.images) ? z.images : [];\n  const hero = z?.mainImage || z?.heroImage || z?.primary_image;\n  const isGood = (im) => {\n    if (!im) return false; const url = typeof im === 'string' ? im : im.url;\n    const w = im?.width ?? 0, h = im?.height ?? 0;\n    if (!url || /sprite|placeholder|blank/.test(String(url))) return false;\n    return (w >= 600 && h >= 600) || (w === 0 && h === 0);\n  };\n  const size = (im) => (im?.width||0) * (im?.height||0);\n  if (isGood(hero)) return hero.url || hero;\n  if (selectedVariant && images.length) {\n    const v = images.find(im => {\n      const txt = (im?.alt || im?.title || '').toLowerCase();\n      const c = String(selectedVariant?.color||'').toLowerCase();\n      return c && txt.includes(c);\n    });\n    if (isGood(v)) return v.url || v;\n  }\n  const good = images.filter(isGood).sort((a,b) => size(b)-size(a))[0];\n  return good ? (good.url || good) : null;\n}\n\n// Unified /products endpoint\napp.get('/products', async (req, res) => {\n  const url = String(req.query.url || '');\n  if (!url) return res.status(400).json({ error: 'MISSING_URL' });\n  try {\n    let engine = 'Zyte';\n    let product = null;\n    let zyteConfidence = 0;\n\n    // 1) Primary: Zyte\n    if (zyte?.extract) {\n      try {\n        const out = await zyte.extract(url);\n        const z = out?.data || out || {};\n        zyteConfidence = Number(out?.confidence || z?.confidence || 0);\n        const pricePick = pickPrice(z);\n        const imageUrl = pickImage(z, z?.selectedVariant);\n        product = {\n          title: z?.name || z?.title || '',\n          price: pricePick?.n,\n          priceSource: pricePick?.k,\n          image: imageUrl || null,\n          engineNote: pricePick ? undefined : 'price_unsure',\n          raw: undefined\n        };\n        console.log(`Selected price: ${pricePick ? `$${pricePick.n} (source: ${pricePick.k})` : 'none (price_unsure)'}`);\n        console.log(`Selected image: ${product.image ? product.image : 'none'}`);\n      } catch (e) {\n        console.log('Zyte failed:', String(e?.message || e));\n        product = null;\n      }\n    }\n\n    // 2) Skip GPT if Zyte high confidence + sane price\n    const canSkipGPT = zyteConfidence >= 0.90 && product && !product.engineNote;\n    if (canSkipGPT) {\n      engine = 'Zyte';\n    } else {\n      // 3) Enrich with GPT (if available), else fallback\n      const keyPresent = !!process.env.OPENAI_API_KEY;\n      if (gpt?.enrich && keyPresent && product) {\n        try {\n          const enriched = await gpt.enrich(url, product);\n          if (enriched && typeof enriched === 'object') {\n            product = { ...product, ...enriched };\n            engine = 'GPT-enriched';\n          }\n        } catch (e) {\n          const msg = String(e?.message || e);\n          if (/401|invalid api key/i.test(msg)) console.log('GPT skipped: no valid key');\n          else console.log('GPT enrich error:', msg);\n        }\n      }\n      if (!product && gpt?.parseOnly && keyPresent) {\n        try {\n          product = await gpt.parseOnly(url);\n          engine = 'GPT-only';\n        } catch (e) {\n          console.log('GPT-only parse error:', String(e?.message || e));\n        }\n      }\n    }\n\n    if (!product) return res.status(502).json({ error: 'SCRAPE_FAILED' });\n    console.log(`Handled by: ${engine}`);\n    res.json({ products: product, engine });\n  } catch (e) {\n    console.error('UNEXPECTED:', e);\n    res.status(500).json({ error: 'UNEXPECTED', message: String(e?.message || e) });\n  }\n});\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => console.log(`SDL Import Calculator running on port ${port}`));\n"
    },
    {
      "path": "src/lib/api.ts",
      "op": "replace",
      "content": "const API = import.meta.env.VITE_API_BASE;\nif (!API) console.warn('VITE_API_BASE is not set');\n\nexport async function fetchProducts(url: string) {\n  if (!API) throw new Error('VITE_API_BASE not set');\n  const q = new URLSearchParams({ url });\n  const r = await fetch(`${API}/products?${q.toString()}`);\n  if (!r.ok) throw new Error(`API ${r.status}`);\n  return r.json();\n}\n"
    },
    {
      "path": ".env.local",
      "op": "append",
      "text": "VITE_API_BASE=http://localhost:8080\n"
    },
    {
      "path": ".env.production",
      "op": "append",
      "text": "VITE_API_BASE=https://<YOUR-RAILWAY-PUBLIC-URL>\n"
    }
  ],
  "title": "Instant Import: prod-safe server, CORS, trust proxy, health/form, Zyte→GPT flow, price/image fixes",
  "body": "This PR makes Instant Import production-safe without touching deps or the lockfile.\\n\\n- Adds trust proxy, strict CORS allowlist (sdl.bm, www.sdl.bm, common localhost ports)\\n- Health endpoints: /ping and /health\\n- /form serves frontend/index.html\\n- /products implements Zyte primary → GPT-enriched → GPT-only fallback with graceful GPT skip\\n- Price selection tiers (LARGE ≥$200, MEDIUM ≥$100, SMALL ≥$50) using prioritized fields\\n- Image selection (hero/variant/largest)\\n- Frontend API uses VITE_API_BASE via src/lib/api.ts\\n- Appends .env.local and .env.production (safe)\\n- Keeps Railway start command: node backend/fastScraper.js.\\n"
}
